#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '0.0.0';

use FindBin;

my $src_dir  = $FindBin::RealBin;
my $test_dir = qq{$src_dir/../test};

my $unicode_math_table = qq{$src_dir/unicode-math-table.tex};

# my $template           = qq{$src_dir/template.ts};

my $output_file = "$test_dir/unicode-math.html";

OUTPUT: {
    my $fh;
    my $indent = 0;

    sub open_output( $ ) {
        open($fh, ">", $output_file) or die "Can't open $output_file: $!\n";

        while (<DATA>) {
            last if m{__END__};

            print { $fh } $_;
        }

        return;
    };

    sub close_output() {
        print { $fh } qq{\n</body>\n\n</html>\n};

        close($fh);

        undef $fh;

        return;
    }

    sub output(@) {
        print { $fh } " " x $indent;
        print { $fh } @_;
    }

    sub indent() {
        $indent += 4;
    };

    sub deindent() {
        $indent -= 4;
    };
}

sub output_ord {
    my $csname     = shift;
    my $code_point = shift;
    my $type       = shift;

    output qq{<p>${csname}: \$\\$csname\$</p>\n};

    return;
}

sub output_accent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{a} \$, \$ \\${csname}{A} \$</p>\n};

    return;
}

sub output_accentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{aa} \$, \$ \\${csname}{aaaaaaa} \$</p>\n};

    return;
}

sub output_accentoverlay( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{a} \$, \$ \\${csname}{A} \$</p>\n};

    return;
}

sub output_underover( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{a} \$, \$ \\${csname}{A} \$</p>\n};

    return;
}

sub output_botaccent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{a} \$, \$ \\${csname}{A} \$</p>\n};

    return;
}

sub output_botaccentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ \\${csname}{aa} \$, \$ \\${csname}{aaaaaaa} \$</p>\n};

    return;
}

sub output_op( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{<p>${csname}: \$ x \\${csname} y \$</p>\n};

    return;
}

HANDLERS: {
    my %HANDLERS = (
        ord           => \&output_ord,
        alpha         => \&output_ord,
        bin           => \&output_op,
        op            => \&output_op,
        punct         => \&output_op,
        rel           => \&output_op,
        over          => \&output_underover,
        under         => \&output_underover,
        accent        => \&output_accent,
        accentoverlay => \&output_accentoverlay,
        accentwide    => \&output_accentwide,
        botaccent     => \&output_botaccent,
        botaccentwide => \&output_botaccentwide,
        );

    sub get_handler( $ ) {
        my $type = shift;

        return $HANDLERS{$type};
    }
}

sub process_unicode_math_table( $ ) {
    my $table = shift;

    my %delimiter;

    my %csname;

    open(my $in, "<", $table) or die "Can't read $table: $!\n";

    while (<$in>) {
        chomp;

        next if m{^%};
        next if m{^\s*$};

        m{^\\UnicodeMathSymbol
              \{"([abcdef\d]+)\}
              \{\\(\w+)\s*\}
              \{\\math(\w+)\s*\}}smxi
            and do {
                my $code_point = $1;
                my $csname     = $2;
                my $type       = $3;

                $code_point =~ s{^0(....)$}{$1};

                if ($type eq 'open' || $type eq 'close' || $type eq 'fence') {
                    $delimiter{$code_point} = $csname;
                } else {
                    $csname{$type}->{$csname} = $code_point;

                    # if (defined(my $handler = get_handler($type))) {
                    #     $handler->($csname, $code_point, $type);
                    # } else {
                    #     warn "No handler for $type\n";
                    # }
                }

                next;
        };

        print "Unexpected input '$_'\n";
    }

    close($in);

    for my $type (qw(accent accentwide accentoverlay botaccent botaccentwide over under alpha bin op rel punct ord)) {
        output qq{\n<h1>math$type</h1>\n\n};

        my %macros = %{ $csname{$type} };

        my $handler = get_handler($type);

        if (! defined $handler) {
            warn "No handler for $type\n";

            next;
        }

        for my $csname (sort keys %macros) {
            my $code_point = $macros{$csname};

            $handler->($csname, $code_point, $type);
        }
    }

    output qq{\n<h1>Delimiters</h1>\n\n};

    for my $code_point (sort { $a cmp $b } keys %delimiter) {
        my $csname = $delimiter{$code_point};

        ## Need to improve this, obvs

        output qq{<p>${csname}: \$ \\${csname} \$</p>\n};
    }

    return;
}

open_output($output_file);

process_unicode_math_table($unicode_math_table);

close_output();

__DATA__

<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Document</title><style id="MJX-SVG-styles">
mjx-container[jax="SVG"] {
  direction: ltr;
}

mjx-container[jax="SVG"] > svg {
  overflow: visible;
}

mjx-container[jax="SVG"] > svg a {
  fill: blue;
  stroke: blue;
}

mjx-container[jax="SVG"][display="true"] {
  display: block;
  text-align: center;
  margin: 1em 0;
}

mjx-container[jax="SVG"][display="true"][width="full"] {
  display: flex;
}

mjx-container[jax="SVG"][justify="left"] {
  text-align: left;
}

mjx-container[jax="SVG"][justify="right"] {
  text-align: right;
}

g[data-mml-node="merror"] > g {
  fill: red;
  stroke: red;
}

g[data-mml-node="merror"] > rect[data-background] {
  fill: yellow;
  stroke: none;
}

g[data-mml-node="mtable"] > line[data-line] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > rect[data-frame] {
  stroke-width: 70px;
  fill: none;
}

g[data-mml-node="mtable"] > .mjx-dashed {
  stroke-dasharray: 140;
}

g[data-mml-node="mtable"] > .mjx-dotted {
  stroke-linecap: round;
  stroke-dasharray: 0,140;
}

g[data-mml-node="mtable"] > g > svg {
  overflow: visible;
}

[jax="SVG"] mjx-tool {
  display: inline-block;
  position: relative;
  width: 0;
  height: 0;
}

[jax="SVG"] mjx-tool > mjx-tip {
  position: absolute;
  top: 0;
  left: 0;
}

mjx-tool > mjx-tip {
  display: inline-block;
  padding: .2em;
  border: 1px solid #888;
  font-size: 70%;
  background-color: #F8F8F8;
  color: black;
  box-shadow: 2px 2px 5px #AAAAAA;
}

g[data-mml-node="maction"][data-toggle] {
  cursor: pointer;
}

mjx-status {
  display: block;
  position: fixed;
  left: 1em;
  bottom: 1em;
  min-width: 25%;
  padding: .2em .4em;
  border: 1px solid #888;
  font-size: 90%;
  background-color: #F8F8F8;
  color: black;
}

foreignObject[data-mjx-xml] {
  font-family: initial;
  line-height: normal;
  overflow: visible;
}

.MathJax path {
  stroke-width: 3;
}
</style></head>

<body>

__END__
