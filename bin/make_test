#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '0.0.0';

use FindBin;

my $src_dir  = $FindBin::RealBin;
my $test_dir = qq{$src_dir/../test};

my $unicode_math_table = qq{$src_dir/unicode-math-table.tex};

# my $template           = qq{$src_dir/template.ts};

my $output_file = "$test_dir/unicode-math.html";

OUTPUT: {
    my $fh;

    sub open_output( $ ) {
        open($fh, ">", $output_file) or die "Can't open $output_file: $!\n";

        while (<DATA>) {
            last if m{__END__};

            print { $fh } $_;
        }

        return;
    };

    sub close_output() {
        print { $fh } qq{\n</body>\n\n</html>\n};

        close($fh);

        undef $fh;

        return;
    }

    sub output(@) {
        print { $fh } @_;
    }

    sub open_section( $ ) {
        my $heading = shift;

        output qq{\n<h1>$heading</h1>\n\n};

        output qq{<table>\n\n};

        return;
    }

    sub close_section() {
        output qq{\n</table>\n};

        return;
    }

    sub output_row(@) {
        print { $fh } qq{<tr>\n};

        for (@_) {
            print { $fh } qq{    <td>$_</td>\n};
        }

        print { $fh } qq{</tr>\n\n};
    }
}

sub output_ord {
    my $csname     = shift;
    my $code_point = shift;
    my $type       = shift;

    output_row ${csname}, qq{\\(\\$csname\\)}, qq{\\(&#x$code_point;\\)};

    return;
}

sub output_op( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( x \\$csname y \\)}, qq{\\( x &#x$code_point; y\\)};

    return;
}

sub output_accent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{a} \\)}, qq{\\( \\${csname}{A} \\)};

    return;
}

sub output_accentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{a} \\)}, qq{\\( \\${csname}{aaaaaaaaa} \\)};

    return;
}

sub output_accentoverlay( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{a} \\)}, qq{\\( \\${csname}{A} \\)};

    return;
}

sub output_underover( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{a} \\)}, qq{\\( \\${csname}{g} \\)};

    return;
}

sub output_botaccent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{a} \\)}, qq{\\( \\${csname}{g} \\)};

    return;
}

sub output_botaccentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output_row ${csname}, qq{\\( \\${csname}{g} \\)}, qq{\\( \\${csname}{gggggggg} \\)};

    return;
}

sub output_delim( $$$$ ) {
    my $l  = shift;
    my $lp = shift;
    my $r  = shift;
    my $rp = shift;

    my $tall = q{\int {1\over\mathrm{house}}\, d\mathrm{house}};

    output_row $l, qq{\\( \\$l x \\$r \\)}, qq{\\( &#x$lp; x &#x$rp; \\)};

    output_row $l, qq{\\( \\left\\$l $tall \\right\\$r \\)}, qq{\\( \\left&#x$lp; $tall \\right&#x$rp; \\)};

    return;
}

HANDLERS: {
    my %HANDLERS = (
        ord           => \&output_ord,
        alpha         => \&output_ord,
        bin           => \&output_op,
        op            => \&output_op,
        punct         => \&output_op,
        rel           => \&output_op,
        over          => \&output_underover,
        under         => \&output_underover,
        accent        => \&output_accent,
        accentoverlay => \&output_accentoverlay,
        accentwide    => \&output_accentwide,
        botaccent     => \&output_botaccent,
        botaccentwide => \&output_botaccentwide,
        );

    sub get_handler( $ ) {
        my $type = shift;

        return $HANDLERS{$type};
    }
}

sub process_unicode_math_table( $ ) {
    my $table = shift;

    my %delimiter;

    my %csname;

    open(my $in, "<", $table) or die "Can't read $table: $!\n";

    while (<$in>) {
        chomp;

        next if m{^%};
        next if m{^\s*$};

        m{^\\UnicodeMathSymbol
              \{"([abcdef\d]+)\}
              \{\\(\w+)\s*\}
              \{\\math(\w+)\s*\}}smxi
            and do {
                my $code_point = $1;
                my $csname     = $2;
                my $type       = $3;

                $code_point =~ s{^0(....)$}{$1};

                if ($type eq 'open' || $type eq 'close' || $type eq 'fence') {
                    $delimiter{$csname} = $code_point;
                } else {
                    $csname{$type}->{$csname} = $code_point;

                    # if (defined(my $handler = get_handler($type))) {
                    #     $handler->($csname, $code_point, $type);
                    # } else {
                    #     warn "No handler for $type\n";
                    # }
                }

                next;
        };

        print "Unexpected input '$_'\n";
    }

    close($in);

    for my $type (qw(accent accentwide accentoverlay botaccent botaccentwide over under alpha bin op rel punct ord)) {
        open_section("math$type");

        my %macros = %{ $csname{$type} };

        my $handler = get_handler($type);

        if (! defined $handler) {
            warn "No handler for $type\n";

            next;
        }

        for my $csname (sort keys %macros) {
            my $code_point = $macros{$csname};

            $handler->($csname, $code_point, $type);
        }

        close_section();
    }

    open_section("Delimiters");

    for my $singleton (qw(sqrt cuberoot fourthroot longdivision)) {
        my $code_point = $delimiter{$singleton};

        output_row $singleton, qq{\\( \\${singleton} \\)}, qq{\\( &#x$code_point; \\)};
    }

    output qq{\n</table>\n\n<table>\n};

    for my $d (qw(Vert Vvert vert mathexclam)) {
        my $code_point = $delimiter{$d};

        output_delim $d, $code_point, $d, $code_point;
    }

    output qq{\n</table>\n\n<table>\n};

    for my $d (qw(Angle Brace Brack Paren angle angledot bag blkbrbrak brace brack brackubar brbrak ceil curvyangle floor group moustache paren vzigzag)) {

        my $l = $delimiter{"l$d"};
        my $r = $delimiter{"r$d"};

        output_delim "l$d", $l, "r$d", $r;
    };

    ## Need to double check these.

    output_delim "Lbrbrak", "27EC", "Rbrbrak", "27ED";

    output_delim "Lparengtr", "2995", "Rparenless", "2996";

    output_delim "lparenless", "2993", "rparengtr", "2994";

    output_delim "Lvzigzag", "29DA", "Rvzigzag", "29DB";

    output_delim "ulcorner", "231C", "urcorner", "231D";

    output_delim "lbracklltick", "298F", "rbracklrtick", "298E";

    output_delim "lbrackultick", "298D", "rbrackurtick", "2990";

    output_delim "llangle", "2989", "rrangle", "298A";

    output_delim "llcorner", "231E", "lrcorner", "231F";

    output_delim "llparenthesis", "2987", "rrparenthesis", "2988";

    # for my $code_point (sort { $a cmp $b } keys %delimiter) {
    #     my $csname = $delimiter{$code_point};
    #
    #     ## Need to improve this, obvs
    #
    #     output qq{<p>${csname}: \$ \\${csname} \$</p>\n};
    # }

    close_section();

    return;
}

open_output($output_file);

process_unicode_math_table($unicode_math_table);

close_output();

__DATA__
<!DOCTYPE html>

<html lang="en">

<head>

<meta charset="UTF-8">

<title>Test of unicode-math</title>

</head>

<body>

__END__
