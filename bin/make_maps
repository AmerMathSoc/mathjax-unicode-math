#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '1.0.0';

use FindBin;

my $src_dir = $FindBin::RealBin;
my $ts_dir  = qq{$src_dir/../ts};

my $unicode_math_table = qq{$src_dir/unicode-math-table.tex};
my $template           = qq{$src_dir/template.ts};

my $output_file = "$ts_dir/unicode-math.ts";

OUTPUT: {
    my $fh;
    my $indent = 0;

    sub open_output( $ ) {
        open($fh, ">", $output_file) or die "Can't open $output_file: $!\n";

        return;
    };

    sub close_output() {
        close($fh);

        undef $fh;

        return;
    }

    sub output(@) {
        print { $fh } " " x $indent;
        print { $fh } @_;
    }

    sub indent() {
        $indent += 4;
    };

    sub deindent() {
        $indent -= 4;
    };
}

# new CharacterMap('mathchar0mi', ParseMethods.mathchar0mi, {
#    alpha: '\u03B1',
# })

sub output_ord {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: '\\u{$usv}',\n};

    return;
}

sub output_alpha {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: '\\u{$usv}',\n};

    return;
}

# new CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {
#     coprod:       ['\u2210', {texClass: TEXCLASS.OP,
#                               movesupsub: true}],
# }

sub output_op( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['\\u{$usv}', {texClass: TEXCLASS.OP, movesupsub: true}],\n};

    return;
}

# new CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {
#     coprod:       ['\u2210', {texClass: TEXCLASS.BIN}],
# }

sub output_bin {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['\\u{$usv}', {texClass: TEXCLASS.BIN}],\n};

    return;
}

# new CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {
#     coprod:       ['\u2210', {texClass: TEXCLASS.PUNCT}],
# }

sub output_punct {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['\\u{$usv}', {texClass: TEXCLASS.PUNCT}],\n};

    return;
}

# new CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {
#     coprod:       ['\u2210', {texClass: TEXCLASS.REL}],
# }

sub output_rel {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['\\u{$usv}', {texClass: TEXCLASS.REL}],\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L565

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_accent( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['Accent', '$usv'],\n};

    return;
}

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_accentwide( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['Accent', '$usv', 1],\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L635

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_accentoverlay( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    # output qq{${csname}: ['Accent', '$usv'],\n};

    output qq{${csname}: 'Not',\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L458

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_underover( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$usv'],\n};

    return;
}

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_botaccent( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$usv'],\n};

    return;
}

# new CommandMap('unicode-math-macros', { acute: ['Accent', '0301'] });

sub output_botaccentwide( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$usv', 1],\n};

    return;
}

# new DelimiterMap('unicode-math-delimiters', ParseMethods.delimiter, {

sub output_open( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{'\\\\$csname': ['\\u{$usv}', { texClass: TEXCLASS.OPEN }],\n};
    output qq{'\\u{$usv}':  ['\\u{$usv}', { texClass: TEXCLASS.OPEN }],\n};

    return;
}

sub output_close( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{'\\\\$csname': ['\\u{$usv}', { texClass: TEXCLASS.CLOSE }],\n};
    output qq{'\\u{$usv}':  ['\\u{$usv}', { texClass: TEXCLASS.CLOSE }],\n};

    return;
}

sub output_fence( $$ ) {
    my $csname = shift;
    my $usv    = shift;
    my $type   = shift;

    output qq{'\\\\$csname': ['\\u{$usv}', { texClass: TEXCLASS.ORD }],\n};
    output qq{'\\u{$usv}':  ['\\u{$usv}', { texClass: TEXCLASS.ORD }],\n};

    return;
}

HANDLERS: {
    my %HANDLERS = (
        ord           => \&output_ord,
        alpha         => \&output_alpha,
        bin           => \&output_bin,
        op            => \&output_op,
        punct         => \&output_punct,
        rel           => \&output_rel,
        over          => \&output_underover,
        under         => \&output_underover,
        accent        => \&output_accent,
        accentoverlay => \&output_accentoverlay,
        accentwide    => \&output_accentwide,
        botaccent     => \&output_botaccent,
        botaccentwide => \&output_botaccentwide,
        open          => \&output_open,
        close         => \&output_close,
        fence         => \&output_fence,
        );

    sub get_handler( $ ) {
        my $type = shift;

        return $HANDLERS{$type};
    }
}

sub process_csnames {
    my $type     = shift;
    my $csnames = shift;

    my $handler = get_handler($type);

    if (! defined $handler) {
        warn "No handler for $type\n";

        next;
    }

    output qq{// \\math$type\n};

    for my $csname (sort keys %{ $csnames }) {
        my $usv = $csnames->{$csname};

        $handler->($csname, $usv, $type);
    }

    return;
}

sub process_unicode_math_table( $ ) {
    my $table = shift;

    my %csname;

    open(my $in, "<", $table) or die "Can't read $table: $!\n";

    local $_;

    while (<$in>) {
        chomp;

        next if m{^%};
        next if m{^\s*$};

        m{^\\UnicodeMathSymbol
              \{"([abcdef\d]+)\}
              \{\\(\w+)\s*\}
              \{\\math(\w+)\s*\}}smxi
            and do {
                my $usv    = $1;
                my $csname = $2;
                my $type   = $3;

                $usv =~ s{^0(....)$}{$1};

                $csname{$type}->{$csname} = $usv;

                next;
        };

        print "Unexpected input '$_'\n";
    }

    close($in);

    output << 'EOF';
new CharacterMap('mathchar0mi', ParseMethods.mathchar0mi, {
EOF

    indent();

    for my $type (qw(alpha ord)) {
        process_csnames($type, $csname{$type});
    }

    deindent();

output << 'EOF';
})

new CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {
EOF

    indent();

    for my $type (qw(op bin punct rel)) {
        process_csnames($type, $csname{$type});
    }

    deindent();

output << 'EOF';
})

new CommandMap('unicode-math-macros', { 
EOF

    indent();
    indent();

    for my $type (qw(accent accentwide accentoverlay botaccent botaccentwide over under)) {
        process_csnames($type, $csname{$type});
    }

    deindent();
    deindent();

    output << 'EOF';
    },
    unicodeMathMethods
);

new DelimiterMap('unicode-math-delimiters', ParseMethods.delimiter, {
EOF

    indent();

    for my $type (qw(open close fence)) {
        process_csnames($type, $csname{$type});
    }

    deindent();

    output qq{\});\n\n};

    return;
}

open(my $ts, "<", $template) or die "Can't open $template: $!\n";

open_output($output_file);

while (<$ts>) {
    m{^export const configuration} and do {
        process_unicode_math_table($unicode_math_table);
    };

    output $_;
}

close_output();

close($ts);

__END__
