#!/usr/bin/perl -w

use strict;
use warnings;

use version; our $VERSION = qv '0.0.0';

use FindBin;

my $src_dir = $FindBin::RealBin;
my $ts_dir  = qq{$src_dir/../ts};

my $unicode_math_table = qq{$src_dir/unicode-math-table.tex};
my $template           = qq{$src_dir/template.ts};

my $output_file = "$ts_dir/unicode-math.ts";

OUTPUT: {
    my $fh;
    my $indent = 0;

    sub open_output( $ ) {
        open($fh, ">", $output_file) or die "Can't open $output_file: $!\n";

        return;
    };

    sub close_output() {
        close($fh);

        undef $fh;

        return;
    }

    sub output(@) {
        print { $fh } " " x $indent;
        print { $fh } @_;
    }

    sub indent() {
        $indent += 4;
    };

    sub deindent() {
        $indent -= 4;
    };
}

sub output_ord {
    my $csname     = shift;
    my $code_point = shift;
    my $type       = shift;

    output qq{${csname}: ['Macro', '\\u{$code_point}'],\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L565

sub output_accent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['Accent', '$code_point'],\n};

    return;
}

sub output_accentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['Accent', '$code_point', 1],\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L635

sub output_accentoverlay( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    # output qq{${csname}: ['Accent', '$code_point'],\n};

    output qq{${csname}: 'Not',\n};

    return;
}

# Cf. https://github.com/mathjax/MathJax-src/blob/aa41c0b9362de07c29dcef6de474941385386293/ts/input/tex/base/BaseMappings.ts#L458

sub output_underover( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$code_point'],\n};

    return;
}

sub output_botaccent( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$code_point'],\n};

    return;
}

sub output_botaccentwide( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['UnderOver', '$code_point', 1],\n};

    return;
}

sub output_op( $$ ) {
    my $csname = shift;
    my $code_point = shift;
    my $type   = shift;

    output qq{${csname}: ['Macro', '\\\\mmlToken{mo}{\\u{$code_point}}'],\n};

    return;
}

HANDLERS: {
    my %HANDLERS = (
        ord           => \&output_ord,
        alpha         => \&output_ord,
        bin           => \&output_op,
        op            => \&output_op,
        punct         => \&output_op,
        rel           => \&output_op,
        over          => \&output_underover,
        under         => \&output_underover,
        accent        => \&output_accent,
        accentoverlay => \&output_accentoverlay,
        accentwide    => \&output_accentwide,
        botaccent     => \&output_botaccent,
        botaccentwide => \&output_botaccentwide,
        );

    sub get_handler( $ ) {
        my $type = shift;

        return $HANDLERS{$type};
    }
}

sub process_unicode_math_table( $ ) {
    my $table = shift;

    my %delimiter;

    output << 'EOF';
new CommandMap(
    'unicode-math-macros',
    {
EOF

    my %csname;

    open(my $in, "<", $table) or die "Can't read $table: $!\n";

    while (<$in>) {
        chomp;

        next if m{^%};
        next if m{^\s*$};

        m{^\\UnicodeMathSymbol
              \{"([abcdef\d]+)\}
              \{\\(\w+)\s*\}
              \{\\math(\w+)\s*\}}smxi
            and do {
                my $code_point = $1;
                my $csname     = $2;
                my $type       = $3;

                $code_point =~ s{^0(....)$}{$1};

                if ($type eq 'open' || $type eq 'close' || $type eq 'fence') {
                    $delimiter{$code_point} = $csname;
                } else {
                    $csname{$type}->{$csname} = $code_point;

                    # if (defined(my $handler = get_handler($type))) {
                    #     $handler->($csname, $code_point, $type);
                    # } else {
                    #     warn "No handler for $type\n";
                    # }
                }

                next;
        };

        print "Unexpected input '$_'\n";
    }

    close($in);

    indent();
    indent();

    for my $type (qw(accent accentwide accentoverlay botaccent botaccentwide over under alpha ord bin op rel punct)) {
        my %macros = %{ $csname{$type} };

        my $handler = get_handler($type);

        if (! defined $handler) {
            warn "No handler for $type\n";

            next;
        }

        output qq{// \\math$type\n};

        for my $csname (sort keys %macros) {
            my $code_point = $macros{$csname};

            $handler->($csname, $code_point, $type);
        }
    }

    deindent();
    deindent();

    output << 'EOF';
    },
    unicodeMathMethods
);

new DelimiterMap('unicode-math-delimiters', ParseMethods.delimiter, {
EOF

    for my $code_point (sort { $a cmp $b } keys %delimiter) {
        my $csname = $delimiter{$code_point};

        output qq{    '\\\\$csname': '\\u{$code_point}',\n};
    }

    output qq{\});\n\n};

    return;
}

open(my $ts, "<", $template) or die "Can't open $template: $!\n";

open_output($output_file);

while (<$ts>) {
    m{^new CommandMap} and do {
        while (<$ts>) {
            last if m{^new EnvironmentMap};
        }

        last;
    };

    output $_;
}

process_unicode_math_table($unicode_math_table);

output qq{new EnvironmentMap(\n};

while (<$ts>) {
    output $_;
}

close_output();

close($ts);

__END__
